<style lang="scss">
#page-my-relations {
  .menu--default {
    .item-label {
      color: #818181;
    }
    .arrow-rt {
      margin-left: 30rpx;
    }
  }
  .add-btn {
    margin-top: 80rpx;
  }
}
</style>

<template>
  <CustomPage>
    <view id="page-my-relations">
      <view class="menu--default" wx:if="{{ list && list.length }}">
        <repeat for="{{ list }}" key="index" item="item" index="index">
          <view 
            class="menu--default__item"
            @tap="toRelationInfo({{ item.id }})">
            <text class="item-label">{{ item.type === 0 ? '本人' : '就诊人' + index }}
            </text>
            <view class="item-value">
              <text>{{ item.name || '' }}</text>
              <view class="arrow-rt"></view>
            </view>
          </view>
        </repeat>
      </view>
      <view class="flex--hcenter">
        <button class="primary-btn add-btn" @tap="toRelationInfo('', {{ list.length }})">
          {{ list.length ? '添加就诊人' : '完善个人信息' }}
        </button>
      </view>
    </view>
  </CustomPage>
</template>

<script>
  import wepy from 'wepy'
  import CustomPage from '@/components/customPage'

  import pageMixin from '@/mixins/page'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '绑定就诊人',
      enablePullDownRefresh: true
    }
    components = {
      CustomPage
    }

    mixins = [pageMixin]

    data = {
      list: []
    }

    computed = {
    }

    methods = {
      toRelationInfo (id, listLen) {
        wx.navigateTo({
          url: `/pages/my_relation_info?type=${ listLen + '' === '0' ? 0 : 1 }` + (id === '' ? '' : `&id=${id}`)
        })
      }
    }

    events = {
    }

    onShow () {
      if (this.$_checkLogin()) {
        this.initPageData()
      }
    }

    onPullDownRefresh () {
      this.initPageData()
    }

    initPageData () {
      this.current = 1
      this.getList()
    }

    getList () {
      return this.initData({
        url: '/patientInfo/all',
        method: 'POST',
        data: {
          current: 1,
          size: 10
        }
      }).then(content => {
        content = content || {}
        const list = content.records || []
        this.list = list.map(item => {
          return {
            type: item.type,
            name: item.name,
            id: item.id
          }
        })
        this.$apply()
      })
    }
  }
</script>
