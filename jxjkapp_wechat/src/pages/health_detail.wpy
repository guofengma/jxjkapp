<style lang="scss">
@import '../assets/style/variables/theme.scss';
#page-health-detail {
  overflow: hidden;
  $topBox_H: 300rpx;
  .top-box {
    position: fixed;
    left: 0;
    top: 0;
    z-index: 1;
    padding: 0 30rpx;
    width: 100%;
    height: $topBox_H;
    color: #fff;
    box-shadow:0 4rpx 24rpx rgba(0,0,0,0.1);

    &__image, &__mask {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      z-index: -1;
    }
    &__image {
      image {
        width: 100%;
        height: 100%;
      }
    }
    &__mask {
      background: rgba(26, 25, 61, 0.3);
    }

    .title {
      font-size: 18px;
    }
    .process-wrap {
      margin-top: 40rpx;
    }
    .process-text {
      font-size: 10px;

      .num {
        font-size: 12px;
      }
    }
    .process-bar {
      overflow: hidden;
      margin-top: 20rpx;
      border-radius: 20rpx;
    }

    .dropdown-btn {
      overflow: hidden;
      position: absolute;
      width: 30rpx;
      height: 30rpx;
      right: 30rpx;
      bottom: 20rpx;

      image {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        opacity: 0.5;
        transform: translate3d(0, -50%, 0);
        @keyframes fadeOut1{
          from {
            opacity: 1;
          }
          to{
            opacity: .5;
          }
        }
        @keyframes fadeOut2{
          from {
            opacity: 0.5;
          }
          to{
            opacity: 1;
          }
        }
        animation: fadeOut1 1s infinite;

        &.dropdown-overlay {
          animation: fadeOut2 1s infinite;
          transform: translate3d(0, 50%, 0);
        }
      }
    }
  }

  .project-describe {
    position: fixed;
    z-index: 1;
    top: $topBox_H;
    left: 0;
    overflow: hidden;
    box-sizing: content-box;
    width: 100%;
    max-height: 0;
    transition: all 0.6s ease-out;
    background: #fff;
    box-shadow:0 4rpx 24rpx rgba(0,0,0,0.1);

    &.spread {
      max-height: 400rpx;
      overflow: auto;
      // transition-timing-function: ease-in;
    }

    &__inner {
      padding: 60rpx 30rpx 30rpx;
    }

    .dropup-btn {
      position: absolute;
      right: 30rpx;
      top: 14rpx;
      color: $primaryColor;

      .arrow-top {
        margin-left: 12rpx;
        width: 16rpx;
        height: 16rpx;
        &::after {
          border-color: $primaryColor $primaryColor transparent transparent;
        }
      }
    }
  }

  .process-list {
    margin-top: $topBox_H + 20rpx;
    background: #fff;
  }
  .process-item {
    position: relative;
    overflow: hidden;
    padding: 30rpx;
    border-bottom: 2rpx solid #E6E6E6;
  }
  .item-top {
    padding: 0 0 18rpx;
    border-bottom: 2rpx solid #F2F2F2;
  }
  .item-main {
    position: relative;
    .row {
      margin-top: 20rpx;
    }
  }
  .item-symptom-wrap {
    position: relative;
    %arrow-common {
      position: absolute;
      right: 0;
      border: 20rpx solid transparent;
      border-width: 12rpx 12rpx;
    }
    .arrow-bt-btn {
      margin-top: 10rpx;
      @extend %arrow-common;
      border-top-color: $color1;
    }
    .arrow-top-btn {
      margin-top: 10rpx;
      @extend %arrow-common;
      transform: translate3d(0, -50%, 0);
      border-bottom-color: $color1;
    }
  }
  .item-symptom--clone {
    position: absolute;
    z-index: -10;
  }
  .item-btn-wrap {
    margin-top: 40rpx;
    justify-content: flex-end;
    button {
      margin: 0 0 0 30rpx;
      width: 60px;
      height: 24px;
      line-height: 24px;

      &[disabled] {
        color: #fff;
      }
      &:not([disabled]) {
        &::after {
          border-color: $primaryColor;
        }
      }

      &.cancel-btn {
        color: $primaryColor;
        &.canceling {
          &::after {
            border-color: #FFB400;
          }
          background: #FFB400;
          color: #fff;
        }
      }
      &.comment-btn {
        background: $primaryColor;
        color: #fff;
        &.commented {
          background: $color1;
        }
      }
    }
  }
}
</style>

<template>
  <CustomPage :isLastPage.sync="isLastPage">
    <view id="page-health-detail" wx:if="{{ listData.length }}">
      <view class="top-box flex--hcenter flex--col">
        <view class="top-box__image">
          <image src="../assets/images/health-bg.png" mode="aspectFill"/>
        </view>
        <view class="top-box__mask"></view>
        <view class="top-box__inner">
          <view class="title">{{ orderInfo.productName }}</view>
          <view class="process-wrap">
            <text class="process-text">第 <text class="num">{{ orderInfo.usedQuantity }}/{{ orderInfo.serviceQuantity }}</text> 次</text>
            <progress 
              class="process-bar"
              stroke-width="10"
              percent="{{ orderInfo.usedQuantity / orderInfo.serviceQuantity * 100 }}"
              backgroundColor="rgba(249, 249, 255, 0.4)"
              activeColor="#56F2F2">
            </progress>
          </view>
          <view 
            class="dropdown-btn"
            hidden="{{projectDesVisible}}"
            @tap="dropdown">
            <image 
              src="../assets/images/double-arrow.png" />
            <image 
              src="../assets/images/double-arrow.png" 
              class="dropdown-overlay" />
          </view>
        </view>
      </view>
      <view class="project-describe {{ projectDesVisible ? 'spread' : '' }} main-bg">
        <view class="project-describe__inner">
          <view 
            class="dropup-btn"
            @tap="dropup">
            收起 <view class="arrow-top"></view>
          </view>
          <text>备注 ：{{ orderInfo.description }}
          </text>
        </view>
      </view>
      <view class="process-list">
        <repeat for="{{ listData }}" key="index" index="index" item="item">
          <view class="process-item">
            <view class="row item-top">
              <text class="item-date">治疗时间：{{ item.createDate }}</text>
            </view>
            <view class="item-main" @tap="spreadSymptom({{ item._symptomSpread !== undefined }}, {{ index }})">
              <view class="row flex--vcenter">
                <text>服务人员：{{ item.doctorName }}</text>
              </view>
              <repeat for="{{[0, 1]}}" key="index" index="_index" item="_item">
                <view class="row flex {{ _index === 1 ? 'item-symptom--clone' : 'item-symptom' }}">
                  <text class="flex-item--none">当日症状：</text>
                  <view class="item-symptom-wrap flex-item ">
                    <text 
                      class="{{ item._symptomSpread || _index === 1 ? '' : 'text-ellipsis--two' }} item-symptom__text">{{ item.doctorComment }}
                    </text>
                    <view 
                      wx:if="{{ item._symptomSpread !== undefined }}"
                      class="{{ item._symptomSpread ? 'arrow-top-btn' : 'arrow-bt-btn' }}">
                    </view>
                  </view>
                </view>
              </repeat>
            </view>
            <view class="item-btn-wrap flex">
              <button 
                @tap="toCancel({{ item.id }}, {{ item }})" 
                class="cancel-btn {{ item.state + '' === '98' ? 'canceling' : '' }}">{{ item.state + '' === '98' ? '处理中' : '申请作废' }}</button>
              <button 
                @tap="toComment({{ item.id }}, {{ item }})" 
                class="comment-btn {{ !!item.grade ? 'commented' : '' }}"
                disabled="{{ !!item.grade }}">{{ !!item.grade ? '已' : '' }}评价</button>
            </view>
          </view>
        </repeat>
      </view>
    </view>
  </CustomPage>
</template>

<script>
  import wepy from 'wepy'

  import CustomPage from '@/components/customPage'
  import listPageMixin from '@/mixins/listPage'
    // NORMAL(0,"指派中"),
  //   IN_SERVICE(1,"服务中"),
  //   COMPLETE(2,"已完成"),
  //   APPLY_CANCELLATION(98,"申请作废"),
  //   CANCELLATION(99,"已作废");

//   评价和申请作废状态说明：

// ① 未评价和未申请作废的项目，按钮展示为“评价”和“申请作废”；

// ② 已评价的项目，按钮变为“已评价”；

// ③ 已申请作废&后台还未通过，按钮变为“处理中”；

// ④ 申请作废后台通过，该项目从列表中去掉；

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '健康记录',
      enablePullDownRefresh: true
    }
    components = {
      CustomPage
    }

    mixins = [listPageMixin]

    data = {
      orderInfo: null, // 订单信息
      projectDesVisible: false
    }

    computed = {
    }

    methods = {
      dropdown () {
        this.projectDesVisible = true
      },
      dropup () {
        this.projectDesVisible = false
      },
      spreadSymptom (canSpread, index) {
        if (canSpread) {
          this.listData[index]._symptomSpread = !this.listData[index]._symptomSpread
        }
      },
      toComment (id, item) {
        wx.navigateTo({
          url: `/pages/health_comment?id=${id}&orderProductId=${this.orderProductId}&orderInfo=${JSON.stringify(this.orderInfo)}` + (item.grade ? `&grade=${JSON.stringify(item.grade)}` : '') 
        })
      },
      toCancel (id, item) {
        wx.navigateTo({
          url: `/pages/health_cancel?id=${id}&orderInfo=${JSON.stringify(this.orderInfo)}` + (item.state + '' === '98' ? `&cancelData=${JSON.stringify({account: item.account})}` : '')
        })
      }
    }

    events = {
    }

    onLoad({orderProductId}) {
      this.orderProductId = orderProductId
    }

    onReady () {
    }

    onShow () {
      this.initPageData()
    }

    // 初始化症状文字
    initSymptom () {
      let vm = this
      const query = wx.createSelectorQuery()
      query
        .selectAll('.item-symptom .item-symptom__text')
        .boundingClientRect()
      query
        .selectAll('.item-symptom--clone .item-symptom__text')
        .boundingClientRect()
        .exec(function () {
          const reality = arguments[0][0]
          const clone = arguments[0][1]
          reality.forEach(function (item, index) {
            if (item.height !== clone[index].height) {
              vm.listData[index]._symptomSpread = false
            } else {
              vm.listData[index]._symptomSpread = undefined
            }
            vm.$apply()
          })
        })
    }

    // 固定方法
    initPageData () {
      this.pageNum = 1
      this.getOrderProductInfo()
      this.getList().then(() => {
        this.initSymptom()
      })
    }

    // 获取订单商品的基本信息
    getOrderProductInfo () {
      return this.$_request({
        url: `/orderProduct/?id=${this.orderProductId}`
      }).then(content => {
        if (!content) {
          throw new Error()
        } else {
          const productSku = content.productSku || {}
          this.orderInfo = {
            serviceQuantity: content.serviceQuantity,
            usedQuantity: content.serviceQuantity - content.remainingServiceNumber,
            productName: productSku.name,
            productImage: productSku.images,
            description: productSku.description
          }
          this.$apply()
        }
      })
    }

    // 获取记录列表
    getList () {
      return this.initData({
        url: '/orderService/query',
        method: 'POST',
        data: {
          orderProductId: this.orderProductId
        }
      }, (listItem, index, content) => {
        const orderProduct = listItem.orderProduct || {}
        const productSku = orderProduct.productSku || {}
        const doctorUserInfo = listItem.adminInfo || {}
        return {
          _symptomSpread: undefined,
          id: listItem.id,
          createDate: this.$_convertDate(listItem.createDate, 'Y-M-D h:m:s'),
          doctorName: doctorUserInfo.name || '',
          doctorComment: listItem.doctorComment || '', // 症状 
          grade: listItem.grade || '', // 用户评价
          state: listItem.state || '', // 状态（申请作废中）
          account: listItem.account // 作废理由
        }
      })
    }
  }
</script>
