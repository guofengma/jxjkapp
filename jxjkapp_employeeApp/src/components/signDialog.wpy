<style lang="scss">
@import '../assets/style/variables/theme.scss';
.comp-sign-dialog {
  .sign-dialog-title {
    font-size: 15px;
    color: #414141;
    margin-bottom: 44rpx;
  }
  .sign-panel {
    width: 100%;
    height: 350rpx;
    background: #F6D6AF;
  }
}
</style>

<template>
  <view class="comp-sign-dialog">
    <CustomDialog 
      :visible.sync="dialogVisible"
      innerStyle="width: 660rpx; height: 610rpx; padding: 60rpx 30rpx;">
      <view class="sign-dialog__inner">
        <view class="sign-dialog-title flex--center">{{ title }}</view>
        <canvas 
          class="sign-panel" 
          canvas-id="myCanvasId"
          @touchstart="handleTouchstart"
          @touchmove="handleTouchmove">
        </canvas>
        <view 
          class="btn-wrap flex--vcenter"
          wx:if="{{ !readonly }}">
          <button 
            type="default" 
            class="flex-item" 
            style="margin-right: 100rpx;"
            @tap="handleReDraw">
            重写</button>
          <button 
            type="primary" 
            class="flex-item"
            @tap="handleSubmitDraw">提交</button>
        </view>
      </view>
    </CustomDialog>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import CustomDialog from './baseComponents/customDialog'

  export default class Index extends wepy.component {
    components = {
      CustomDialog
    }

    props = {
      readonly: {
        type: Boolean,
        default: false
      },
      touchList: {
        type: Array,
        default: [],
        twoWay: true
      },
      visible: { // 控制弹框显示
        type: Boolean,
        twoWay: true,
        default: false
      },
      title: { // 弹框标题
        type: String,
        default: ''
      }
    }

    data = {
      dialogVisible: false
    }

    watch = {
      visible (newVal) {
        this.dialogVisible = newVal
        this.$apply()
      },
      dialogVisible (newVal) {
        this.visible = newVal
        this.$apply()
      },
      // 监听画线节点数据变化
      touchList (newVal) {
        this.drawStroke()
      }
    }

    computed = {
    }

    methods = {
      handleTouchstart ({ touches }) {
        this.saveActions(touches, 'start')
      },
      handleTouchmove ({ touches }) {
        this.saveActions(touches, 'move')
      },
      // 重写
      handleReDraw () {
        const ctx = this.canvasCtx
        this.touchList = []
        ctx.draw()
      },
      // 提交签名
      handleSubmitDraw () {
        this.visible = false
        this.$apply()
      }
    }

    onLoad () {
      this.canvasCtx = wx.createCanvasContext('myCanvasId')
    }

    // 记录画笔历史节点
    saveActions (touches, type) {
      if (this.readonly) {
        return
      }
      const touch = touches[0]
      this.touchList.push({
        type,
        ...touch
      })
    }
    // 画线
    drawStroke (touches, type) {
      const ctx = this.canvasCtx
      this.touchList.forEach((item) => {
        if (item.type === 'start') {
          ctx.moveTo(item.x, item.y)
        } else if (item.type === 'move') {
          ctx.lineTo(item.x, item.y)
        }
      })
      ctx.stroke()
      ctx.draw()
    }
  }
</script>
